"use client";

import React, { useState } from 'react';

// Mapping audio pour le Chapitre 1, Page 2
const chapter1Page2AudioMappings: { [key: string]: string } = {
  'ÿß': 'chap0_pg0_case1',
  'ÿ®ŸÄ': 'chap0_pg0_case2',
  'ÿ™ŸÄ': 'chap0_pg0_case3',
  'ÿ´ŸÄ': 'chap0_pg0_case4',
  'ÿ¨ŸÄ': 'chap0_pg0_case5',
  'ÿ≠ŸÄ': 'chap0_pg0_case6',
  'ÿÆŸÄ': 'chap0_pg0_case7',
  'ÿØ': 'chap0_pg0_case8',
  'ÿ∞': 'chap0_pg0_case9',
  'ÿ±': 'chap0_pg0_case10',
  'ÿ≤': 'chap0_pg0_case11',
  'ÿ≥ŸÄ': 'chap0_pg0_case12',
  'ÿ¥ŸÄ': 'chap0_pg0_case13',
  'ÿµŸÄ': 'chap0_pg0_case14',
  'ÿ∂ŸÄ': 'chap0_pg0_case15',
  'ÿ∑ŸÄ': 'chap0_pg0_case16',
  'ÿ∏ŸÄ': 'chap0_pg0_case17',
  'ÿπŸÄ': 'chap0_pg0_case18',
  'ÿ∫ŸÄ': 'chap0_pg0_case19',
  'ŸÅŸÄ': 'chap0_pg0_case20',
  'ŸÇŸÄ': 'chap0_pg0_case21',
  'ŸÉŸÄ': 'chap0_pg0_case22',
  'ŸÑŸÄ': 'chap0_pg0_case23',
  'ŸÖŸÄ': 'chap0_pg0_case24',
  'ŸÜŸÄ': 'chap0_pg0_case25',
  'ŸáŸÄ': 'chap0_pg0_case26',
  'Ÿà': 'chap0_pg0_case27',
  'ŸäŸÄ': 'chap0_pg0_case28',
  'ÿ°': 'chap0_pg0_case29'
};

// Liste des 6 lettres qui ne s'attachent jamais apr√®s elles
const nonConnectingLetters = ['ÿß', 'ÿØ', 'ÿ∞', 'ÿ±', 'ÿ≤', 'Ÿà'];

// Dictionnaire des mots exemples pour chaque lettre
const letterExamples: { [key: string]: { word: string; translation: string } } = {
  'ÿß': { word: 'ÿ£ÿ±ŸÜÿ®', translation: 'Lapin' },
  'ÿ®ŸÄ': { word: 'ÿ®ÿ∑ÿ©', translation: 'Canard' },
  'ÿ™ŸÄ': { word: 'ÿ™ŸÅÿßÿ≠ÿ©', translation: 'Pomme' },
  'ÿ´ŸÄ': { word: 'ÿ´ÿπŸÑÿ®', translation: 'Renard' },
  'ÿ¨ŸÄ': { word: 'ÿ¨ŸÖŸÑ', translation: 'Chameau' },
  'ÿ≠ŸÄ': { word: 'ÿ≠ŸÑŸäÿ®', translation: 'Lait' },
  'ÿÆŸÄ': { word: 'ÿÆÿ±ŸàŸÅ', translation: 'Mouton' },
  'ÿØ': { word: 'ÿØÿ¨ÿßÿ¨ÿ©', translation: 'Poule' },
  'ÿ∞': { word: 'ÿ∞Ÿáÿ®', translation: 'Or' },
  'ÿ±': { word: 'Ÿàÿ±ÿØÿ©', translation: 'Rose' },
  'ÿ≤': { word: 'ÿ≤ÿ±ÿßŸÅÿ©', translation: 'Girafe' },
  'ÿ≥ŸÄ': { word: 'ÿ≥Ÿäÿßÿ±ÿ©', translation: 'Voiture' },
  'ÿ¥ŸÄ': { word: 'ÿ¥ŸÖÿ≥', translation: 'Soleil' },
  'ÿµŸÄ': { word: 'ÿµÿßÿ®ŸàŸÜ', translation: 'Savon' },
  'ÿ∂ŸÄ': { word: 'ÿ∂ŸÅÿØÿπ', translation: 'Grenouille' },
  'ÿ∑ŸÄ': { word: 'ÿ∑ÿßÿ¶ÿ±ÿ©', translation: 'Avion' },
  'ÿ∏ŸÄ': { word: 'ÿ∏ÿ®Ÿä', translation: 'Gazelle' },
  'ÿπŸÄ': { word: 'ÿπÿ≥ŸÑ', translation: 'Miel' },
  'ÿ∫ŸÄ': { word: 'ÿ∫ŸäŸÖÿ©', translation: 'Nuage' },
  'ŸÅŸÄ': { word: 'ŸÅŸäŸÑ', translation: '√âl√©phant' },
  'ŸÇŸÄ': { word: 'ŸÇŸÑŸÖ', translation: 'Crayon' },
  'ŸÉŸÄ': { word: 'ŸÉÿ™ÿßÿ®', translation: 'Livre' },
  'ŸÑŸÄ': { word: 'ŸÑŸäŸÖŸàŸÜ', translation: 'Citron' },
  'ŸÖŸÄ': { word: 'ŸÖŸàÿ≤', translation: 'Banane' },
  'ŸÜŸÄ': { word: 'ŸÜÿ≠ŸÑÿ©', translation: 'Abeille' },
  'ŸáŸÄ': { word: 'ŸáÿØŸäÿ©', translation: 'Cadeau' },
  'Ÿà': { word: 'Ÿàÿ±ŸÇÿ©', translation: 'Feuille' },
  'ŸäŸÄ': { word: 'ŸäŸÖÿßŸÖÿ©', translation: 'Colombe' },
  'ÿ°': { word: 'ÿ£ÿ≥ÿØ', translation: 'Lion' }
};

const Page2 = () => {
  // Fonction pour jouer l'audio avec le mapping sp√©cifique
  const playLetterAudio = (letter: string) => {
    const audioFileName = chapter1Page2AudioMappings[letter];
    if (audioFileName) {
      const audio = new Audio(`/audio/chapitre0_1/${audioFileName}.mp3`);
      audio.play().catch(error => {
        console.error('Erreur lors de la lecture audio:', error);
      });
    }
  };

  const letters = [
    // Row 1
    { letter: 'ÿß', emphatic: false, violet: false },
    { letter: 'ÿ®ŸÄ', emphatic: false, violet: false },
    { letter: 'ÿ™ŸÄ', emphatic: false, violet: false },
    { letter: 'ÿ´ŸÄ', emphatic: false, violet: false },
    { letter: 'ÿ¨ŸÄ', emphatic: false, violet: false },
    { letter: 'ÿ≠ŸÄ', emphatic: false, violet: false },
    
    // Row 2
    { letter: 'ÿÆŸÄ', emphatic: true, violet: false },
    { letter: 'ÿØ', emphatic: false, violet: false },
    { letter: 'ÿ∞', emphatic: false, violet: false },
    { letter: 'ÿ±', emphatic: true, violet: false },
    { letter: 'ÿ≤', emphatic: false, violet: false },
    { letter: 'ÿ≥ŸÄ', emphatic: false, violet: false },
    
    // Row 3
    { letter: 'ÿ¥ŸÄ', emphatic: false, violet: false },
    { letter: 'ÿµŸÄ', emphatic: true, violet: false },
    { letter: 'ÿ∂ŸÄ', emphatic: true, violet: false },
    { letter: 'ÿ∑ŸÄ', emphatic: true, violet: false },
    { letter: 'ÿ∏ŸÄ', emphatic: true, violet: false },
    { letter: 'ÿπŸÄ', emphatic: false, violet: false },
    
    // Row 4
    { letter: 'ÿ∫ŸÄ', emphatic: true, violet: false },
    { letter: 'ŸÅŸÄ', emphatic: false, violet: false },
    { letter: 'ŸÇŸÄ', emphatic: true, violet: false },
    { letter: 'ŸÉŸÄ', emphatic: false, violet: false },
    { letter: 'ŸÑŸÄ', emphatic: false, violet: false },
    { letter: 'ŸÖŸÄ', emphatic: false, violet: false },
    
    // Row 5
    { letter: 'ŸÜŸÄ', emphatic: false, violet: false },
    { letter: 'ŸáŸÄ', emphatic: false, violet: false },
    { letter: 'Ÿà', emphatic: false, violet: false },
    { letter: 'ŸäŸÄ', emphatic: false, violet: false },
    { letter: 'ÿ°', emphatic: false, violet: true }
  ];

  const handleLetterClick = (letter: string) => {
    // Utiliser directement la lettre avec ses attachements pour le mapping
    playLetterAudio(letter);
  };

  return (
    <div className="font-arabic min-h-screen bg-gray-900" style={{ direction: 'rtl' }}>
      <div className="w-full h-full overflow-hidden bg-gray-900">
        {/* Header */}
        <div className="text-white p-6 text-center border-b-2">
          <div className="text-3xl font-bold mb-4">
            Le√ßon : lettres attach√©es au d√©but d'un mot
          </div>
        </div>
        
        {/* Alphabet Grid */}
        <div className="p-8 bg-gray-900">
          <div className="grid grid-cols-4 md:grid-cols-6 lg:grid-cols-7 gap-4 mb-6">
            {letters.map((item, index) => (
              <Cell 
                key={index} 
                letter={item.letter} 
                emphatic={item.emphatic}
                violet={item.violet}
                onClick={() => handleLetterClick(item.letter)}
              />
            ))}
          </div>
          {/* L√©gende simplifi√©e */}
          <div className="bg-gray-800 rounded-lg p-4 mb-4">
            <div className="flex items-center justify-center gap-4 text-sm">
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-red-400 rounded-full"></div>
                <span className="text-red-400">Lettres emphatiques</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-purple-400 rounded-full"></div>
                <span className="text-purple-400">Lettres sp√©ciales</span>
              </div>
            </div>
          </div>
          {/* Footer */}
          <footer className="border-t-1 text-white text-center p-6 flex-shrink-0 font-semibold text-sm">
            <div>Page 2</div>
            <div className="mt-1">¬© 2025 Tous droits r√©serv√©s</div>
          </footer>
        </div>
      </div>
    </div>
  );
};

// Popup Component - MODIFI√â pour toutes les lettres avec des mots sp√©cifiques
const InfoPopup = ({ letter, onClose }: { letter: string; onClose: () => void }) => {
  const isNonConnecting = nonConnectingLetters.includes(letter);
  const example = letterExamples[letter] || { word: 'ŸÉŸÑŸÖÿ©', translation: 'Mot' };
  
  // Fonction pour diviser le mot arabe en lettres pour l'affichage color√©
  const renderColoredWord = (word: string, targetLetter: string) => {
    // Nettoyer la lettre cible des caract√®res de connexion
    const cleanTargetLetter = targetLetter.replace('ŸÄ', '');
    
    return word.split('').map((char, index) => {
      // Pour l'alif, on v√©rifie aussi les formes similaires
      const isTarget = cleanTargetLetter === 'ÿß' 
        ? (char === 'ÿß' || char === 'ÿ£' || char === 'ÿ•' || char === 'ÿ¢')
        : char === cleanTargetLetter;
      
      return (
        <span 
          key={index} 
          className={isTarget ? 'text-red-400' : 'text-white'}
        >
          {char}
        </span>
      );
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 p-2 sm:p-4">
      <div 
        className="bg-gradient-to-br from-gray-800 to-gray-900 rounded-2xl sm:rounded-3xl p-4 sm:p-6 w-full max-w-[95vw] sm:max-w-md mx-2 shadow-2xl border-2 border-blue-500"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex justify-between items-center mb-3 sm:mb-4">
          <h3 className="text-lg sm:text-xl font-bold text-white">Connexion au d√©but d'un mot</h3>
          <button 
            onClick={onClose} 
            className="text-gray-400 hover:text-white text-2xl sm:text-3xl font-bold leading-none"
          >
            &times;
          </button>
        </div>
        
        <div className="space-y-3 sm:space-y-4">
          {/* Explication simple */}
          <div className="border rounded-xl p-3 sm:p-4 shadow-lg">
            <p className="text-white text-base sm:text-lg text-center">
              <span className="text-red-400 text-2xl sm:text-3xl font-bold mx-2">{letter}</span>
            </p>
          </div>
          
          {/* Information sp√©ciale pour les lettres non-attachantes */}
          {isNonConnecting && (
            <div className="bg-gradient-to-r from-purple-600 to-purple-800 rounded-xl p-2 sm:p-3 shadow-lg">
              <p className="text-white text-xs text-center font-semibold flex items-center justify-center gap-1">
                <span className="text-lg">‚ö†Ô∏è</span>
                <span>Cette lettre fait partie des 6 lettres qui ne s'attacheront JAMAIS apr√®s elles : ÿß, ÿØ, ÿ∞, ÿ±, ÿ≤, Ÿà</span>
              </p>
            </div>
          )}
          
          {/* Exemple en arabe */}
          <div className="bg-gray-700 rounded-xl p-3 sm:p-4 shadow-lg">
            <p className="text-gray-300 text-xs mb-2 text-center">üìñ Exemple </p>
            <div className="bg-gray-800 rounded-lg p-3 sm:p-4 mb-2">
              <div className="text-3xl sm:text-4xl font-bold text-center" style={{ direction: 'rtl' }}>
                {renderColoredWord(example.word, letter)}
              </div>
            </div>
            
            {/* Traduction fran√ßaise s√©par√©e */}
            <div className="bg-blue-900 bg-opacity-40 rounded-lg p-2 sm:p-3 border-2 border-blue-500">
              <p className="text-white text-lg sm:text-xl font-bold text-center">
                {example.translation}
              </p>
            </div>
          </div>
          
          {/* Info suppl√©mentaire */}
          <div className="bg-gradient-to-r from-yellow-600 to-orange-600 rounded-xl p-2 sm:p-3 shadow-lg">
            <p className="text-white text-xs text-center font-semibold flex items-center justify-center gap-1">
              <span className="text-lg">üí°</span>
              <span>
                {isNonConnecting 
                  ? "Cette lettre ne se connecte pas √† la lettre suivante, donc sa forme reste identique en d√©but de mot"
                  : "La lettre est connect√©e √† la lettre suivante, donc sa forme change. C'est pour cela qu'on parle de 'lettre en d√©but de mot' : cela fait r√©f√©rence √† la mani√®re dont elle s'√©crit au d√©but d'un mot"
                }
              </span>
            </p>
          </div>
        </div>
        
        <button 
          onClick={onClose}
          className="mt-4 sm:mt-6 w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-bold py-2 sm:py-3 rounded-lg transition-all transform hover:scale-105 shadow-lg text-base"
        >
          ‚úì Compris
        </button>
      </div>
    </div>
  );
};

// Cell Component adapt√© pour le th√®me sombre - MODIFI√â pour toutes les lettres
const Cell = ({ letter, emphatic, violet, onClick }: { 
  letter: string; 
  emphatic?: boolean;
  violet?: boolean;
  onClick?: () => void;
}) => {
  const [showPopup, setShowPopup] = useState(false);
  
  // Maintenant TOUTES les lettres ont le popup d'information
  const hasInfo = true;

  return (
    <>
      <div 
        className="border border-zinc-500 rounded-xl p-4 text-center min-h-[100px] flex flex-col justify-center items-center hover:bg-zinc-700 transition-all duration-300 hover:scale-105 cursor-pointer relative"
        onClick={onClick}
      >
        <div className={`text-3xl md:text-4xl font-bold transition-colors ${
          emphatic ? 'text-red-400' : 
          violet ? 'text-purple-400' : 
          'text-white'
        }`}>
          {letter}
        </div>
        
        {hasInfo && (
          <button
            onClick={(e) => {
              e.stopPropagation();
              setShowPopup(true);
            }}
            className="absolute bottom-2 right-2 w-7 h-7 rounded-full flex items-center justify-center text-sm transition-all hover:scale-110"
            title="Plus d'infos"
          >
            ‚ÑπÔ∏è
          </button>
        )}
      </div>
      
      {showPopup && <InfoPopup letter={letter} onClose={() => setShowPopup(false)} />}
    </>
  );
};

export default Page2;