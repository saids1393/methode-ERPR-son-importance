// app/api/videos/route.ts
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getAuthUserFromRequest } from '@/lib/auth';
import { NextRequest } from 'next/server';

// GET - R√©cup√©rer toutes les vid√©os actives
export async function GET(request: NextRequest) {
  try {
    // V√©rifier que l'utilisateur est connect√©
    const user = await getAuthUserFromRequest(request);
    if (!user) {
      return NextResponse.json(
        { error: 'Non autoris√©' },
        { status: 401 }
      );
    }

    const videos = await prisma.chapterVideo.findMany({
      where: { isActive: true },
      include: {
        chapter: {
          select: {
            chapterNumber: true,
            title: true,
          },
        },
      },
    });

    // Trier les vid√©os par chapterNumber c√¥t√© application
    const sortedVideos = videos.sort((a, b) => {
      const chapterA = a.chapter?.chapterNumber || 0;
      const chapterB = b.chapter?.chapterNumber || 0;
      return chapterA - chapterB;
    });

    // Formater les donn√©es
    const formattedVideos = sortedVideos.map(video => ({
      id: video.id,
      chapterNumber: video.chapter?.chapterNumber,
      chapterTitle: video.chapter?.title,
      title: video.title,
      cloudflareVideoId: video.cloudflareVideoId,
      thumbnailUrl: video.thumbnailUrl,
      duration: video.duration,
    }));

    return NextResponse.json(formattedVideos);
  } catch (error) {
    console.error('Get videos error:', error);
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    );
  }
}

// POST - Cr√©er ou mettre √† jour une vid√©o (pour l'admin)
export async function POST(request: NextRequest) {
  try {
    const user = await getAuthUserFromRequest(request);
    if (!user) {
      return NextResponse.json(
        { error: 'Non autoris√©' },
        { status: 401 }
      );
    }

    const { chapterNumber, title, cloudflareVideoId, thumbnailUrl, duration } = await request.json();

    console.log('üìπ [API] Cr√©ation/mise √† jour vid√©o:', {
      chapterNumber,
      title,
      cloudflareVideoId,
      thumbnailUrl,
      duration
    });
    
    // Validation des donn√©es
    if (chapterNumber === null || chapterNumber === undefined || !title || !cloudflareVideoId) {
      console.log('‚ùå [API] Donn√©es manquantes:', { chapterNumber, title, cloudflareVideoId });
      return NextResponse.json(
        { error: 'Donn√©es manquantes' },
        { status: 400 }
      );
    }

    // Validation du num√©ro de chapitre
    if (typeof chapterNumber !== 'number' || chapterNumber < 0 || chapterNumber > 11) {
      console.log('‚ùå [API] Num√©ro de chapitre invalide:', chapterNumber);
      return NextResponse.json(
        { error: 'Num√©ro de chapitre invalide (0-11)' },
        { status: 400 }
      );
    }

    // Validation de l'ID Cloudflare
    if (typeof cloudflareVideoId !== 'string' || cloudflareVideoId.trim().length === 0) {
      console.log('‚ùå [API] ID Cloudflare invalide:', cloudflareVideoId);
      return NextResponse.json(
        { error: 'ID Cloudflare vid√©o invalide' },
        { status: 400 }
      );
    }

    // Validation du titre
    if (typeof title !== 'string' || title.trim().length === 0) {
      console.log('‚ùå [API] Titre invalide:', title);
      return NextResponse.json(
        { error: 'Titre invalide' },
        { status: 400 }
      );
    }

    // 1. D'abord, trouver ou cr√©er le chapitre
    let chapter = await prisma.chapter.findUnique({
      where: { chapterNumber }
    });

    if (!chapter) {
      // Cr√©er le chapitre s'il n'existe pas
      console.log('‚ûï [API] Cr√©ation du chapitre', chapterNumber);
      chapter = await prisma.chapter.create({
        data: {
          chapterNumber,
          title: `Chapitre ${chapterNumber}`,
          isActive: true,
        },
      });
    }

    // 2. V√©rifier si une vid√©o existe d√©j√† pour ce chapitre
    const existingVideo = await prisma.chapterVideo.findFirst({
      where: { 
        chapterId: chapter.id 
      }
    });

    console.log('üîç [API] Vid√©o existante trouv√©e:', existingVideo ? 'Oui' : 'Non');

    let video;
    
    if (existingVideo) {
      // Mise √† jour de la vid√©o existante
      console.log('üîÑ [API] Mise √† jour de la vid√©o existante pour le chapitre', chapterNumber);
      video = await prisma.chapterVideo.update({
        where: { id: existingVideo.id },
        data: {
          title: title.trim(),
          cloudflareVideoId: cloudflareVideoId.trim(),
          thumbnailUrl: thumbnailUrl?.trim() || null,
          duration: duration || null,
          isActive: true,
          updatedAt: new Date(),
        },
      });
    } else {
      // Cr√©ation d'une nouvelle vid√©o
      console.log('‚ûï [API] Cr√©ation d\'une nouvelle vid√©o pour le chapitre', chapterNumber);
      video = await prisma.chapterVideo.create({
        data: {
          chapterId: chapter.id,
          title: title.trim(),
          cloudflareVideoId: cloudflareVideoId.trim(),
          thumbnailUrl: thumbnailUrl?.trim() || null,
          duration: duration || null,
          isActive: true,
        },
      });
    }

    // R√©cup√©rer la vid√©o avec les donn√©es du chapitre pour la r√©ponse
    const videoWithChapter = await prisma.chapterVideo.findUnique({
      where: { id: video.id },
      include: {
        chapter: {
          select: {
            chapterNumber: true,
            title: true,
          },
        },
      },
    });

    console.log('‚úÖ [API] Vid√©o sauvegard√©e:', videoWithChapter);
    return NextResponse.json(videoWithChapter);
  } catch (error) {
    console.error('‚ùå [API] Erreur Create/Update video:', error);
    
    // Gestion des erreurs sp√©cifiques de Prisma
    if (error instanceof Error) {
      if (error.message.includes('Unique constraint')) {
        return NextResponse.json(
          { error: 'Cet ID Cloudflare est d√©j√† utilis√© par une autre vid√©o' },
          { status: 400 }
        );
      }
    }
    
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    );
  }
}