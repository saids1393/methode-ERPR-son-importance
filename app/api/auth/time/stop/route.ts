import { NextRequest, NextResponse } from 'next/server';
import { getAuthUserFromRequest } from '@/lib/auth';
import { prisma } from '@/lib/prisma';

export async function POST(request: NextRequest) {
  try {
    console.log('‚èπÔ∏è [API] ===== ARR√äT CHRONO =====');
    
    const user = await getAuthUserFromRequest(request);
    
    if (!user) {
      console.log('‚ùå [API] UTILISATEUR NON AUTHENTIFI√â');
      return NextResponse.json(
        { error: 'Non autoris√©' },
        { status: 401 }
      );
    }

    console.log('üë§ [API] UTILISATEUR AUTHENTIFI√â:', user.id);

    // R√©cup√©rer l'utilisateur avec l'heure de d√©but
    const userData = await prisma.user.findUnique({
      where: { id: user.id },
      select: { 
        studyTimeSeconds: true,
        updatedAt: true // Notre marqueur temporaire
      },
    });

    if (!userData) {
      console.log('‚ùå [API] UTILISATEUR NON TROUV√â');
      return NextResponse.json(
        { error: 'Utilisateur non trouv√©' },
        { status: 404 }
      );
    }

    // Calculer le temps √©coul√©
    const endTime = new Date();
    const startTime = userData.updatedAt;
    const sessionSeconds = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);
    
    console.log('üìä [API] TEMPS DE SESSION:', sessionSeconds, 'secondes');
    console.log('üìä [API] TEMPS ACTUEL EN DB:', userData.studyTimeSeconds);

    // Ajouter le temps de session au total
    const newTotalTime = userData.studyTimeSeconds + sessionSeconds;
    
    console.log('üìä [API] NOUVEAU TEMPS TOTAL:', newTotalTime);

    // Mettre √† jour en DB
    const updatedUser = await prisma.user.update({
      where: { id: user.id },
      data: { studyTimeSeconds: newTotalTime },
      select: { studyTimeSeconds: true },
    });

    console.log('‚úÖ [API] CHRONO ARR√äT√â ET TEMPS SAUVEGARD√â:', updatedUser.studyTimeSeconds);

    return NextResponse.json({ 
      success: true, 
      sessionSeconds,
      totalSeconds: updatedUser.studyTimeSeconds,
      message: 'Chrono arr√™t√© et sauvegard√©'
    });
  } catch (error) {
    console.error('‚ùå [API] ERREUR STOP CHRONO:', error);
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    );
  }
}