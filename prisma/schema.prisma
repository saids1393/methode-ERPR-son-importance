generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  username          String?    @unique
  password          String?
  isActive          Boolean    @default(false)
  stripeCustomerId  String?
  stripeSessionId   String?
  completedPages    Int[]      @default([])
  completedQuizzes  Int[]      @default([])
  studyTimeSeconds  Int        @default(0)
  resetToken        String?
  resetTokenExpires DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  gender            Gender?
  professorId       String?
  sessions          Session[]
  professor         Professor? @relation(fields: [professorId], references: [id])
}

model Professor {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String
  gender         Gender
  zoomMeetingId  String?
  zoomPassword   String?
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  password       String?
  availabilities Availability[]
  sessions       Session[]
  students       User[]
}

model Availability {
  id           String    @id @default(cuid())
  professorId  String
  dayOfWeek    Int
  startTime    String
  endTime      String
  isRecurring  Boolean   @default(true)
  specificDate DateTime?
  maxSessions  Int       @default(1)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  professor    Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  sessions     Session[]

  @@index([professorId])
  @@index([dayOfWeek])
}

model Session {
  id             String               @id @default(cuid())
  userId         String
  professorId    String
  scheduledAt    DateTime
  status         SessionStatus        @default(SCHEDULED)
  zoomLink       String?
  notes          String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  availabilityId String?
  cancellationId String?
  availability   Availability?        @relation(fields: [availabilityId], references: [id])
  professor      Professor            @relation(fields: [professorId], references: [id], onDelete: Cascade)
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  cancellation   SessionCancellation?

  @@index([availabilityId])
}

model CancellationReason {
  id            String                @id @default(cuid())
  reason        String
  category      String
  isActive      Boolean               @default(true)
  createdAt     DateTime              @default(now())
  cancellations SessionCancellation[]
}

model SessionCancellation {
  id           String             @id @default(cuid())
  sessionId    String             @unique
  cancelledBy  String
  reasonId     String
  customReason String?
  cancelledAt  DateTime           @default(now())
  reason       CancellationReason @relation(fields: [reasonId], references: [id])
  session      Session            @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
}

model ChapterVideo {
  id                String   @id @default(cuid())
  chapterNumber     Int      @unique
  title             String
  cloudflareVideoId String   @unique
  thumbnailUrl      String?
  duration          Int?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum Gender {
  HOMME
  FEMME
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}
