// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  HOMME
  FEMME
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  username         String?  @unique
  password         String?
  gender           Gender?
  isActive         Boolean  @default(false)
  stripeCustomerId String?
  stripeSessionId  String?
  completedPages   Int[]    @default([])
  completedQuizzes Int[]    @default([])
  studyTimeSeconds Int      @default(0)
  resetToken       String?
  resetTokenExpires DateTime?
  professorId      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  professor        Professor? @relation(fields: [professorId], references: [id])
  sessions         Session[]
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

model Professor {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  password      String?
  gender        Gender
  zoomMeetingId String?
  zoomPassword  String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  students      User[]
  sessions      Session[]
}

model Session {
  id          String        @id @default(cuid())
  userId      String
  professorId String
  scheduledAt DateTime
  status      SessionStatus @default(SCHEDULED)
  zoomLink    String?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  professor   Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
}

model ChapterVideo {
  id                String   @id @default(cuid())
  chapterNumber     Int      @unique
  title             String
  cloudflareVideoId String   @unique
  thumbnailUrl      String?
  duration          Int?     // dur√©e en secondes
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
